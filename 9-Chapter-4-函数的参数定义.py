'''
一. 函数定义默认值参数
函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参
'''

def fun(a,b=10):  #b称为默认值参数
    print(a,b)

#函数的调用
fun(100)  #只传一个参数，b采用默认值
#100 10

fun(20,30)  #30将默认值10替换
#20 30

'''
二. 个数可变的位置参数
定义函数时，可能无法事先确定传递的位置实参的个数时，使用可变的位置形参
使用*定义个数可变的位置形参
结果为一个元组
'''
def fun(*args):    #函数定义时的 可变的位置参数
    print(args)

fun(10)
fun(10,30)
fun(30,405,50)
#(10,)
#(10, 30)
#(30, 405, 50)


'''
三. 个数可变的关键字形参
定义函数是，可能无法事先确定传递的关键字实参的个数时，使用可变的关键字形参
使用**定义个数可变的位置形参
结果为一个字典
'''

def fun1(**args):
    print(args)

fun1(a=10)
fun1(a=20,b=30,c=40)
#{'a': 10}
#{'a': 20, 'b': 30, 'c': 40}


#个数可变的位置参数，只能有一个
'''
def fun2(*args,*a)
会报错
'''

#个数可变的关键字参数，只能有一个
'''
def fun2(**args,**args)
会报错
'''

#在函数的定义过程当中，既有个数可变的关键字形参，也有个数可变的位置形参，要求个数可变的位置形参放在个数可变的关键字形参之前
def fun2(*args,**args2):
    pass   #不报错
'''
def fun3(**args,*args2):
    pass
    会报错
'''


'''
四.函数的参数总结
'''
def fun(a,b,c):  #a,b,c在函数的定义处，所以是形式参数
    print('a=',a)
    print('b=',b)
    print('c=',c)

#函数的调用
fun(10,20,30) #函数调用时的参数传递，称为位置传参  ,因为把10赋给a，20赋给b 所以是位置传参
lst=[11,22,33]
fun(*lst)  #在函数调用时，将列表中的每个元素都转换为位置实参传入
#a= 10
#b= 20
#c= 30
#a= 11
#b= 22
#c= 33

fun(a=100,c=300,b=200)#函数的调用，直接给abc赋值，所以是关键字实参
#a= 100
#b= 200
#c= 300

dic={'a':111,'b':222,'c':333}
#fun(dic)
#会报错，因为字典是一个元素，如果想进行关键字传参，需要将字典中的1每个键值对转换为关键字实参传入，加**
fun(**dic)
#在函数调用时，将字典中的键值对都转换为关键字实参入
#a= 111
#b= 222
#c= 333

def fun4(a,b=10):  #b是在函数的定义处，所以b是形参，而且进行了赋值，所以b称为默认值参数
    print(a,b)

def fun5(*args):  #个数可变的位置形参
    print(args)
def fun6(**args2):  #个数可变的关键字形参
    print(args2)
#以上都是在函数的定义处

fun5(10,20,30,40)  #调用函数fun5时，反正是个数可变的，传多少都可以
#(10, 20, 30, 40)  元组
fun6(a=11,b=22,c=33,d=44) #同上
#{'a': 11, 'b': 22, 'c': 33, 'd': 44} 字典

def fun7(a,b,c,d):
    print(a,b,c,d)

#调用fun7函数
fun7(10,20,30,40)  #位置实参传递
fun7(a=10,b=20,c=30,d=40) #关键字实参传递
fun7(10,20,c=30,d=40)  #前2个采取位置实参传递，后2个采用关键字实参传递


#如果要求c,d只能采用关键字实参传递
def fun8(a,b,*,c,d):    #从*之后的参数，在函数调用时，只能采用关键字参数传递
    print(a, b, c, d)

fun8(10, 20, c=30, d=40)



'''
五.函数定义时的形参顺序问题
'''

def fun9(a,b,*,c,d,**args):
    pass

def fun10(*args,**args2):
    pass

def fun11(a,b=10,*args,**args2):
    pass

#以上三种都是可以的